function execute_job(job)
    num_commands = 0
    cmd = job.first_command
    while cmd != NULL
        num_commands++
        cmd = cmd.next
    end while

    pipe_fds = array of size [num_commands - 1][2]
    for i = 0 to num_commands - 2
        if pipe(pipe_fds[i]) == -1
            perror("pipe")
            return -1
        end if
    end for

    status = 0
    cmd = job.first_command
    for i = 0 to num_commands - 1
        pid = execute_command(cmd)
        if pid == -1
            status = -1
            break
        end if

        if i > 0
            dup2(pipe_fds[i - 1][0], STDIN_FILENO)
            close(pipe_fds[i - 1][0])
            close(pipe_fds[i - 1][1])
        end if

        if i < num_commands - 1
            dup2(pipe_fds[i][1], STDOUT_FILENO)
            close(pipe_fds[i][0])
            close(pipe_fds[i][1])
        end if

        if !job.background and cmd.next == NULL
            waitpid(pid, &status, 0)
        else
            print("[", i + 1, "] ", pid)
        end if
    end for

    return status
end function

function execute_command_list(cmd_list)
    status = 0
    job = cmd_list.first_job
    while job != NULL
        job_status = execute_job(job)
        if job_status == -1
            status = -1
        end if

        if !job.background and job.next != NULL
            wait(NULL)
        end if

        job = job.next
    end while

    return status
end function

function free_command_list(cmd_list)
    if !cmd_list
        return
    end if

    current_job = cmd_list.first_job
    while current_job
        next_job = current_job.next

        current_cmd = current_job.first_command
        while current_cmd
            next_cmd = current_cmd.next
            free_command(current_cmd)
            current_cmd = next_cmd
        end while

        free(current_job)
        current_job = next_job
    end while

    free(cmd_list)
end function
